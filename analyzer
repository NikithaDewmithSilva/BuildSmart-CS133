import ezdxf
import math

# File path to the DXF file (update as needed)
FILE_PATH = r"C:\Users\atcha\OneDrive\Desktop\DXF FILE\Floor plan.dxf"

# Layer names for detection
WALL_LAYER = "xref-Bishop-Overland-08$0$A-WALL"
FOUNDATION_LAYERS = ["xref-Bishop-Overland-08$0$S-FOOTER", "xref-Bishop-Overland-08$0$S-STEM-WALL"]
SLAB_LAYER = "xref-Bishop-Overland-08$0$S-SLAB"

# Labels for identifying components
DOOR_LABELS = ["D1", "D2", "RSD", "DOOR"]
WINDOW_LABELS = ["FW", "W1", "SW", "FL", "WINDOW"]

# Configurable parameters
WALL_HEIGHT = 2.4  # meters, configurable wall height
CONCRETE_CEMENT_RATIO = 350  # kg/m³ for concrete
CONCRETE_GRAVEL_RATIO = 1000  # kg/m³
CONCRETE_SAND_RATIO = 600  # kg/m³
STEEL_SLAB_RATIO = 65  # kg/m³ for slabs
STEEL_FOUNDATION_RATIO = 100  # kg/m³ for foundations
BRICKS_PER_SQ_UNIT = 7  # bricks per square unit
CEMENT_PER_BRICK = 0.25  # kg cement per brick

def calculate_area(entity):
    """Calculate the area of a given entity with extended entity type support."""
    try:
        if entity.dxftype() == 'LWPOLYLINE' and hasattr(entity, 'get_area'):
            return entity.get_area()
        elif entity.dxftype() == 'CIRCLE' and hasattr(entity.dxf, 'radius'):
            return math.pi * (entity.dxf.radius ** 2)
        elif entity.dxftype() == 'HATCH' and hasattr(entity, 'paths'):
            return sum(path.area for path in entity.paths if hasattr(path, 'area'))
        elif entity.dxftype() == 'LINE':
            start = entity.dxf.start
            end = entity.dxf.end
            length = math.sqrt((end[0] - start[0])**2 + (end[1] - start[1])**2)
            return length * WALL_HEIGHT  # Using configurable wall height
        elif entity.dxftype() == 'POLYLINE' and entity.is_closed:
            points = [pt[:2] for pt in entity.points()]  # Get 2D points
            area = 0.5 * abs(sum(
                points[i][0] * points[(i + 1) % len(points)][1] -
                points[(i + 1) % len(points)][0] * points[i][1]
                for i in range(len(points))
            ))
            return area
        elif entity.dxftype() == 'SPLINE':
            # Approximate area for closed splines (simplified)
            if entity.closed:
                points = [pt[:2] for pt in entity.control_points]
                area = 0.5 * abs(sum(
                    points[i][0] * points[(i + 1) % len(points)][1] -
                    points[(i + 1) % len(points)][0] * points[i][1]
                    for i in range(len(points))
                ))
                return area
            return 0.0
        return 0.0
    except Exception as e:
        print(f"Error calculating area for entity {entity}: {e}")
        return 0.0

def infer_material(entity):
    try:
        if hasattr(entity, 'dxf'):
            layer_name = getattr(entity.dxf, 'layer', "").lower()
            if "wall" in layer_name:
                return "WALL"
            elif any(label.lower() in layer_name for label in DOOR_LABELS):
                return "DOOR"
            elif any(label.lower() in layer_name for label in WINDOW_LABELS):
                return "WINDOW"
        # Additional checks for TEXT / MTEXT
        if entity.dxftype() in ['TEXT', 'MTEXT']:
            text = getattr(entity.dxf, 'text', "").lower()
            if any(label.lower() in text for label in DOOR_LABELS):
                return "DOOR"
            elif any(label.lower() in text for label in WINDOW_LABELS):
                return "WINDOW"
        return None
    except AttributeError:
        return None

def process_dxf_file(file_path):
    """Process the DXF file and calculate material estimates."""
    try:
        doc = ezdxf.readfile(file_path)
        msp = doc.modelspace()
    except FileNotFoundError:
        print(f"Error: File '{file_path}' not found.")
        return
    except ezdxf.DXFStructureError as e:
        print(f"Error: Invalid DXF file structure - {e}")
        return
    
    walls = 0
    doors = 0
    windows = 0
    total_wall_area = 0.0
    foundations = 0
    total_foundation_area = 0.0
    slabs = 0
    total_slab_area = 0.0
    
    for entity in msp:
        layer = entity.dxf.layer
        area = calculate_area(entity)
        material = infer_material(entity)
        
        if material == "WALL" or layer == WALL_LAYER:
            walls += 1
            total_wall_area += area
        elif material == "DOOR":
            doors += 1
        elif material == "WINDOW":
            windows += 1
        elif layer in FOUNDATION_LAYERS:
            foundations += 1
            total_foundation_area += area
        elif layer == SLAB_LAYER:
            slabs += 1
            total_slab_area += area
    
    # Calculate total area (for reporting purposes)
    total_area = total_wall_area + total_foundation_area + total_slab_area
    
    # Output Summary (Removed Total Door/Window Area)
    print("Summary:")
    print(f"Walls: {walls}, Total Wall Area: {total_wall_area:.2f} sq units")
    print(f"Detected Doors: {doors}")
    print(f"Detected Windows: {windows}")
    print(f"Total Area (Walls + Foundations + Slabs): {total_area:.2f} sq units")
    print(f"Foundations: {foundations}, Total Foundation Area: {total_foundation_area:.2f} sq units")
    print(f"Slabs: {slabs}, Total Slab Area: {total_slab_area:.2f} sq units")
    
    # Wall Material Estimate
    bricks_needed = int(total_wall_area * BRICKS_PER_SQ_UNIT)
    cement_needed_wall_kg = (total_wall_area * 0.1) * CONCRETE_CEMENT_RATIO + bricks_needed * CEMENT_PER_BRICK
    cement_needed_wall_bags = cement_needed_wall_kg / 50
    sand_needed_wall = (total_wall_area * 0.1) * CONCRETE_SAND_RATIO + bricks_needed * 0.15
    
    print("\nWall Material Estimate:")
    print(f"Estimated bricks required: {bricks_needed}")
    print(f"Estimated cement required: {cement_needed_wall_bags:.2f} bags ({cement_needed_wall_kg:.2f} kg)")
    print(f"Estimated sand required: {sand_needed_wall:.2f} kg")
    
    # Foundation Material Estimate
    foundation_volume = total_foundation_area * 0.2
    cement_needed_foundation = foundation_volume * CONCRETE_CEMENT_RATIO
    cement_needed_foundation_bags = cement_needed_foundation / 50
    gravel_needed_foundation = foundation_volume * CONCRETE_GRAVEL_RATIO
    sand_needed_foundation = foundation_volume * CONCRETE_SAND_RATIO
    steel_needed_foundation = foundation_volume * STEEL_FOUNDATION_RATIO
    
    print("\nFoundation Material Estimate:")
    print(f"Estimated concrete volume: {foundation_volume:.2f} cubic meters")
    print(f"Estimated cement required: {cement_needed_foundation_bags:.2f} bags ({cement_needed_foundation:.2f} kg)")
    print(f"Estimated gravel required: {gravel_needed_foundation:.2f} kg")
    print(f"Estimated sand required: {sand_needed_foundation:.2f} kg")
    print(f"Estimated steel required: {steel_needed_foundation:.2f} kg")
    
    # Slab Material Estimate
    slab_volume = total_slab_area * 0.15
    cement_needed_slab = slab_volume * CONCRETE_CEMENT_RATIO
    cement_needed_slab_bags = cement_needed_slab / 50
    gravel_needed_slab = slab_volume * CONCRETE_GRAVEL_RATIO
    sand_needed_slab = slab_volume * CONCRETE_SAND_RATIO
    steel_needed_slab = slab_volume * STEEL_SLAB_RATIO
    
    print("\nSlab Material Estimate:")
    print(f"Estimated concrete volume: {slab_volume:.2f} cubic meters")
    print(f"Estimated cement required: {cement_needed_slab_bags:.2f} bags ({cement_needed_slab:.2f} kg)")
    print(f"Estimated gravel required: {gravel_needed_slab:.2f} kg")
    print(f"Estimated sand required: {sand_needed_slab:.2f} kg")
    print(f"Estimated steel required: {steel_needed_slab:.2f} kg")
    
    # Plaster Material Estimate for walls
    PLASTER_CEMENT_RATE = 6  # kg per square unit (this can be adjusted)
    plaster_cement_needed_kg = total_wall_area * PLASTER_CEMENT_RATE
    plaster_bags = plaster_cement_needed_kg / 25  # Each bag is 25 kg

    print("\nPlaster Material Estimate:")
    print(f"Estimated Number of Plaster Bags (25kg Per Bag): {plaster_bags:.2f}")
    
    # Primer Material Estimate for walls
    PRIMER_RATE = 0.4  # liters per square unit
    primer_needed = total_wall_area * PRIMER_RATE

    print("\nPrimer Material Estimate:")
    print(f"Estimated Amount of Primer  : {primer_needed:.2f} liters")
    
    # Paint Material Estimate for walls
    PAINT_RATE = 0.3  # liters per square unit per coat
    double_coat_multiplier = 2  # For double coat
    paint_needed = total_wall_area * PAINT_RATE * double_coat_multiplier

    print("\nPaint Material Estimate:")
    print(f"Estimated Amount of Paint  : {paint_needed:.2f} liters")

process_dxf_file(FILE_PATH)
