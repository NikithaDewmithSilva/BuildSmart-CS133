import ezdxf
import math

# Change to your file path
file_path = r"C:\Users\atcha\OneDrive\Documents\Baticaloa.dxf"
doc = ezdxf.readfile(file_path)
msp = doc.modelspace()

# Initialize counters
walls = 0
doors = 0
windows = 0
total_area = 0

# Define labels
door_labels = ["D1", "D2", "RSD", "DOOR"]
window_labels = ["FW", "W1", "SW", "FL", "WINDOW"]

def calculate_area(entity):
    """Calculate the area of a given entity."""
    if entity.dxftype() == 'LWPOLYLINE':
        # Check if the entity has an area method
        if hasattr(entity, 'get_area'):
            return entity.get_area()
        elif hasattr(entity, 'area'):
            return entity.area()
        return 0
    elif entity.dxftype() == 'CIRCLE':
        radius = entity.dxf.radius
        return math.pi * (radius ** 2)
    elif entity.dxftype() == 'ARC':
        radius = entity.dxf.radius
        angle = math.radians(entity.dxf.end_angle - entity.dxf.start_angle)
        return 0.5 * (radius ** 2) * angle
    elif entity.dxftype() == 'HATCH':
        # Check if the entity has an area method
        if hasattr(entity, 'get_area'):
            return entity.get_area()
        elif hasattr(entity, 'area'):
            return entity.area()
        return 0
    return 0

def count_entities():
    global walls, doors, windows, total_area

    # Count walls and calculate area
    for entity in msp.query("LINE LWPOLYLINE"):
        walls += 1
        # LINE entities don't have area, only calculate area for LWPOLYLINE
        if entity.dxftype() == 'LWPOLYLINE':
            total_area += calculate_area(entity)

    # Count doors and windows based on block names
    for entity in msp.query("INSERT"):
        block_name = entity.dxf.name.upper()
        if any(label in block_name for label in door_labels):
            doors += 1
        elif any(label in block_name for label in window_labels):
            windows += 1

    # Avoid double counting by checking layers only for entities not already counted
    for entity in msp:
        if hasattr(entity, 'dxf') and hasattr(entity.dxf, 'layer'):
            layer_name = entity.dxf.layer.upper()
            entity_type = entity.dxftype()
            
            # Skip INSERTs which were already counted
            if entity_type == 'INSERT':
                continue
                
            if any(label in layer_name for label in door_labels):
                doors += 1
            elif any(label in layer_name for label in window_labels):
                windows += 1

    # Count doors and windows based on text
    for entity in msp.query("TEXT MTEXT"):
        if hasattr(entity, 'dxf') and hasattr(entity.dxf, 'text'):
            text = entity.dxf.text.upper()
            if any(label in text for label in door_labels):
                doors += 1
            elif any(label in text for label in window_labels):
                windows += 1

    # Process arcs/circles/hatches
    for entity in msp.query("ARC CIRCLE HATCH"):
        # Don't automatically assume these are doors
        total_area += calculate_area(entity)

# Call the function to count entities
count_entities()

# Print the results
print(f"Detected Walls: {walls}")
print(f"Detected Doors: {doors}")
print(f"Detected Windows: {windows}")
print(f"Total Area: {total_area:.2f} sq units")  # Units depend on the drawing

# Calculate estimated materials
if walls > 0:
    wall_area = total_area  # Use the calculated area instead of an assumption
    bricks_needed = int(wall_area * 7)  # Assume 7 bricks per sq unit
    print(f"Estimated bricks required: {bricks_needed}")
else:
    print("No walls detected to calculate brick requirements")